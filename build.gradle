plugins {
    id 'java-library'
    id 'jacoco'
    id 'org.springframework.boot' apply(false)
    id 'io.spring.dependency-management'
    id 'com.diffplug.spotless' apply(false)
}

apply from: 'lint.gradle'

allprojects {
    group = "${projectGroup}"
    version = "${applicationVersion}"
    sourceCompatibility = project.javaVersion

    repositories {
        mavenCentral()
    }
}

ext {
    set('snippetsDir', file("build/generated-snippets"))
}

subprojects {
    apply plugin: 'java-library'
    apply plugin: 'jacoco'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    configurations {
        compileOnly {
            extendsFrom annotationProcessor
        }
    }

    dependencies {
        compileOnly 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'
        testCompileOnly 'org.projectlombok:lombok'
        testAnnotationProcessor 'org.projectlombok:lombok'

        testImplementation 'org.springframework.boot:spring-boot-starter-test'
        testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    }

    test {
        outputs.dir snippetsDir
        useJUnitPlatform()
        finalizedBy 'jacocoTestReport'
    }

    jacocoTestReport {
        reports {
            html.enabled true
            xml.enabled true
            csv.enabled false
        }

        excludedClassFilesForReport(classDirectories)
        finalizedBy 'jacocoTestCoverageVerification'
    }

    jacocoTestCoverageVerification {
        excludedClassFilesForReport(classDirectories)
        violationRules {
            rule {
                limit {
                    counter = 'LINE'
                    value = 'COVEREDRATIO'
                    minimum = 0.80
                }
            }
        }
    }

    tasks.named('bootJar') {
        enabled = false
    }

    tasks.named('jar') {
        enabled = true
    }
}

private excludedClassFilesForReport(classDirectories) {
    classDirectories.setFrom(
            files(classDirectories.files.collect {
                fileTree(dir: it, exclude: [
                        "**/*Application*",
                        "**/*Config*",
                        "**/*Request*",
                        "**/*Response*",
                        "**/*ErrorCode*",
                        "**/*Exception*",
                        "**/*ExceptionHandler*",
                        "**/*Event*",
                        "**/commons/**",
                        "**/Q*"
                ])
            })
    )
}
